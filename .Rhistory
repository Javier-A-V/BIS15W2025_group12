geom_boxplot(na.rm=T)+
theme_light(base_size=14)+
labs(title="Elevation vs Diversity",
x = "Elevation (m)")
})
output$plot4<-renderPlot({
ggplot(data = soil,
aes_string(x=input$x_species, y=input$y_species, color="transect"))+
geom_point(na.rm=T)+
theme_light(base_size = 14)+
geom_smooth(method=lm, se=T, color="black")+
labs(title="Soil Properties vs Trophic Guilds")
})
}
shinyApp(ui, server)
library(shiny)
ui <- dashboardPage(
dashboardHeader(title = "Nematode Soil Dashboard"),
dashboardSidebar(
sidebarMenu(
menuItem("Map", tabName = "map", icon = icon("map")),
menuItem("Soil vs Climatic Properties", tabName = "dashboard", icon = icon("dashboard")),
menuItem("Moisture at Different Elevation Levels", tabName = "widgets", icon = icon("th")),
menuItem("Elevation vs Diversity", tabName = "tables", icon = icon("th")),
menuItem("Soil Properties vs Trophic Guilds", tabName = "species", icon = icon("th"))
)
),
dashboardBody(
tabItems(
tabItem(tabName = "map",
fluidRow(
column(8, leafletOutput("nematode_map", height = 600)),
column(4, plotOutput("index_bar_plot", height = 300))
),
selectInput("nematode", "Select Trophic Guild(s):",
choices = unique(nematode$trophic_guild),
selected = unique(nematode$trophic_guild)[1],
multiple = TRUE),
sliderInput("pH_range", "Select pH Range:",
min = min(nematode$p_h, na.rm = TRUE),
max = max(nematode$p_h, na.rm = TRUE),
value = c(min(nematode$p_h, na.rm = TRUE), max(nematode$p_h, na.rm = TRUE))),
sliderInput("moisture_range", "Select Moisture Range:",
min = min(nematode$moisture, na.rm = TRUE),
max = max(nematode$moisture, na.rm = TRUE),
value = c(min(nematode$moisture, na.rm = TRUE), max(nematode$moisture, na.rm = TRUE))),
sliderInput("elevation_range", "Select Elevation Range:",
min = min(nematode$elevation, na.rm = TRUE),
max = max(nematode$elevation, na.rm = TRUE),
value = c(min(nematode$elevation, na.rm = TRUE), max(nematode$elevation, na.rm = TRUE))),
),
tabItem(tabName = "dashboard",
fluidRow(
box(plotOutput("plot1", height = 250)),
selectInput("x_dash", "Select Soil Variable:",
choices = c("conductivity", "p_h", "moisture", "temperature"),
selected = "conductivity"),
selectInput("y_dash", "Select Climatic Variable:",
choices = c("temperature_annual_range", "precipitation_of_wettest_month", "precipitation_seasonality", "precipitation_of_driest_month"),
selected = "temperature_annual_range")
)
),
tabItem(tabName = "widgets",
fluidRow(
box(plotOutput("plot2", height = 250)),
selectInput("elevation", "Select Elevation Level:", choices = unique(soil$elevation_level))
)
),
tabItem(tabName = "tables",
fluidRow(
box(plotOutput("plot3", height = 250)),
selectInput("y_tables", "Select Y Variable",
choices = c("enrichment_footprint", "composite_footprint", "sigma_maturity_index"),
selected = "enrichment_footprint")
)
),
tabItem(tabName = "species",
fluidRow(
box(plotOutput("plot4", height = 400, width = 400)),
selectInput("x_species", "Select X Variable",
choices = c("conductivity", "p_h", "moisture", "temperature","isothermality"),
selected = "conductivity"),
selectInput("y_species", "Select Y Variable",
choices = c("herbivores_percent_of_total", "fungivores_percent_of_total", "bacterivores_percent_of_total", "predators_percent_of_total", "omnivores_percent_of_total"),
selected = "herbivores_percent_of_total")
)
)
)
)
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
pal <- colorFactor(palette = c("#E41A1C", "#377EB8", "#FF7F00", "#984EA3", "#F1C40F"),
domain = unique(nematode$trophic_guild))
filtered_data <- reactive({
nematode %>%
filter(trophic_guild %in% input$nematode,
elevation >= input$elevation_range[1] & elevation <= input$elevation_range[2],
p_h >= input$pH_range[1] & p_h <= input$pH_range[2],
moisture >= input$moisture_range[1] & moisture <= input$moisture_range[2],
percent > 0) %>%
left_join(elevation_dominant, by = "elevation_level") %>%
mutate(mean_percent = round(mean_percent, 2))
})
output$nematode_map <- renderLeaflet({
leaflet(filtered_data()) %>%
addTiles() %>%
addCircleMarkers(
~longitude, ~latitude,
color = ~pal(trophic_guild),
fillColor = ~pal(trophic_guild),
fillOpacity = 0.8,
popup = ~paste(
"<b>Site:</b> ", site, " 🌍<br>",
"<b>Trophic Guild:</b> ", trophic_guild, " 🐛<br>",
"<b>Percent:</b> ", sprintf("%.2f", percent), "% 📊<br>",
"<b>Elevation:</b> ", elevation, "m <i>(", elevation_level, ")</i> ⛰️<br>",
"<b>Dominant Guild at This Elevation:</b> ", mean_percent, "% - <i>", trophic_guild_d, "</i> 🏆<br>",
"<b>pH:</b> ", p_h, " 🌱<br>",
"<b>Moisture:</b> ", moisture, " 💧<br>",
"<b>Conductivity:</b> ", conductivity, " ⚡<br>"
),
clusterOptions = markerClusterOptions(spiderfyOnMaxZoom = TRUE,  # Expands clusters when zoomed in
showCoverageOnHover = FALSE,  # Prevents large coverage areas on hover
zoomToBoundsOnClick = TRUE,  # Zooms into a cluster when clicked
spiderfyDistanceMultiplier = 2)
) %>%
addLegend("topright",
pal = pal,
values = ~trophic_guild,
title = "Trophic Guild",
opacity = 1)
})
observeEvent(input$nematode_map_marker_click, {
click <- input$nematode_map_marker_click
if(!is.null(click)) {
clicked_site <- click$id
selected_data <- nematode %>%
filter(site == clicked_site) %>%
select("channel_index" = CI, "sigma_maturity_index" = SMI, "enrichment_footprint" = EI) %>%
gather(key = "Index", value = "Value")
selected_data$Index <- factor(selected_data$Index,
levels = c("Channel Index", "Sigma Maturity Index", "Enrichment Index"),
labels = c("CI", "SMI", "EI"))
output$index_bar_plot <- renderPlot({
ggplot(selected_data, aes(x = Index, y = Value, fill = Index)) +
geom_col() +
theme_minimal() +
scale_fill_manual(values = c("CI" = "#E41A1C", "SMI" = "#377EB8", "EI" = "#4DAF4A")) +
labs(title = paste("Indices at Site:", clicked_site),
x = "Index", y = "Value") +
theme(legend.position = "none")
})
}
})
output$plot1 <- renderPlot({
ggplot(data = soil, aes_string(x = input$x_dash, y = input$y_dash, color = "transect")) +
geom_point(na.rm = TRUE) +
theme_light(base_size = 14) +
geom_smooth(method = "lm", se = FALSE)+
labs(title="Soil vs Climatic Properties")
})
output$plot2 <- renderPlot({
soil %>%
filter(elevation_level==input$elevation) %>%
ggplot(aes(x=moisture)) +
geom_density(color="black", fill="steelblue", alpha=0.6)+
labs(title="Moisture at Different Elevation Levels")
})
output$plot3 <- renderPlot({
ggplot(data=soil,
aes(x = factor(elevation_level, levels = c("Low", "Medium", "High")),
y= !!sym(input$y_tables),
color= transect))+
geom_boxplot(na.rm=T)+
theme_light(base_size=14)+
labs(title="Elevation vs Diversity",
x = "Elevation (m)")
})
output$plot4<-renderPlot({
ggplot(data = soil,
aes_string(x=input$x_species, y=input$y_species, color="transect"))+
geom_point(na.rm=T)+
theme_light(base_size = 14)+
geom_smooth(method=lm, se=T, color="black")+
labs(title="Soil Properties vs Trophic Guilds")
})
}
shinyApp(ui, server)
library(shiny)
ui <- dashboardPage(
dashboardHeader(title = "Nematode Soil Dashboard"),
dashboardSidebar(
sidebarMenu(
menuItem("Map", tabName = "map", icon = icon("map")),
menuItem("Soil vs Climatic Properties", tabName = "dashboard", icon = icon("dashboard")),
menuItem("Moisture at Different Elevation Levels", tabName = "widgets", icon = icon("th")),
menuItem("Elevation vs Diversity", tabName = "tables", icon = icon("th")),
menuItem("Soil Properties vs Trophic Guilds", tabName = "species", icon = icon("th"))
)
),
dashboardBody(
tabItems(
tabItem(tabName = "map",
fluidRow(
column(8, leafletOutput("nematode_map", height = 600)),
column(4, plotOutput("index_bar_plot", height = 300))
),
selectInput("nematode", "Select Trophic Guild(s):",
choices = unique(nematode$trophic_guild),
selected = unique(nematode$trophic_guild)[1],
multiple = TRUE),
sliderInput("pH_range", "Select pH Range:",
min = min(nematode$p_h, na.rm = TRUE),
max = max(nematode$p_h, na.rm = TRUE),
value = c(min(nematode$p_h, na.rm = TRUE), max(nematode$p_h, na.rm = TRUE))),
sliderInput("moisture_range", "Select Moisture Range:",
min = min(nematode$moisture, na.rm = TRUE),
max = max(nematode$moisture, na.rm = TRUE),
value = c(min(nematode$moisture, na.rm = TRUE), max(nematode$moisture, na.rm = TRUE))),
sliderInput("elevation_range", "Select Elevation Range:",
min = min(nematode$elevation, na.rm = TRUE),
max = max(nematode$elevation, na.rm = TRUE),
value = c(min(nematode$elevation, na.rm = TRUE), max(nematode$elevation, na.rm = TRUE))),
),
tabItem(tabName = "dashboard",
fluidRow(
box(plotOutput("plot1", height = 250)),
selectInput("x_dash", "Select Soil Variable:",
choices = c("conductivity", "p_h", "moisture", "temperature"),
selected = "conductivity"),
selectInput("y_dash", "Select Climatic Variable:",
choices = c("temperature_annual_range", "precipitation_of_wettest_month", "precipitation_seasonality", "precipitation_of_driest_month"),
selected = "temperature_annual_range")
)
),
tabItem(tabName = "widgets",
fluidRow(
box(plotOutput("plot2", height = 250)),
selectInput("elevation", "Select Elevation Level:", choices = unique(soil$elevation_level))
)
),
tabItem(tabName = "tables",
fluidRow(
box(plotOutput("plot3", height = 250)),
selectInput("y_tables", "Select Y Variable",
choices = c("enrichment_footprint", "composite_footprint", "sigma_maturity_index"),
selected = "enrichment_footprint")
)
),
tabItem(tabName = "species",
fluidRow(
box(plotOutput("plot4", height = 400, width = 400)),
selectInput("x_species", "Select X Variable",
choices = c("conductivity", "p_h", "moisture", "temperature","isothermality"),
selected = "conductivity"),
selectInput("y_species", "Select Y Variable",
choices = c("herbivores_percent_of_total", "fungivores_percent_of_total", "bacterivores_percent_of_total", "predators_percent_of_total", "omnivores_percent_of_total"),
selected = "herbivores_percent_of_total")
)
)
)
)
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
pal <- colorFactor(palette = c("#E41A1C", "#377EB8", "#FF7F00", "#984EA3", "#F1C40F"),
domain = unique(nematode$trophic_guild))
filtered_data <- reactive({
nematode %>%
filter(trophic_guild %in% input$nematode,
elevation >= input$elevation_range[1] & elevation <= input$elevation_range[2],
p_h >= input$pH_range[1] & p_h <= input$pH_range[2],
moisture >= input$moisture_range[1] & moisture <= input$moisture_range[2],
percent > 0) %>%
left_join(elevation_dominant, by = "elevation_level") %>%
mutate(mean_percent = round(mean_percent, 2))
})
output$nematode_map <- renderLeaflet({
leaflet(filtered_data()) %>%
addTiles() %>%
addCircleMarkers(
~longitude, ~latitude,
color = ~pal(trophic_guild),
fillColor = ~pal(trophic_guild),
fillOpacity = 0.8,
popup = ~paste(
"<b>Site:</b> ", site, " 🌍<br>",
"<b>Trophic Guild:</b> ", trophic_guild, " 🐛<br>",
"<b>Percent:</b> ", sprintf("%.2f", percent), "% 📊<br>",
"<b>Elevation:</b> ", elevation, "m <i>(", elevation_level, ")</i> ⛰️<br>",
"<b>Dominant Guild at This Elevation:</b> ", mean_percent, "% - <i>", trophic_guild_d, "</i> 🏆<br>",
"<b>pH:</b> ", p_h, " 🌱<br>",
"<b>Moisture:</b> ", moisture, " 💧<br>",
"<b>Conductivity:</b> ", conductivity, " ⚡<br>"
),
clusterOptions = markerClusterOptions(spiderfyOnMaxZoom = TRUE,  # Expands clusters when zoomed in
showCoverageOnHover = FALSE,  # Prevents large coverage areas on hover
zoomToBoundsOnClick = TRUE,  # Zooms into a cluster when clicked
spiderfyDistanceMultiplier = 2)
) %>%
addLegend("topright",
pal = pal,
values = ~trophic_guild,
title = "Trophic Guild",
opacity = 1)
})
observeEvent(input$nematode_map_marker_click, {
click <- input$nematode_map_marker_click
if(!is.null(click)) {
clicked_site <- click$site
selected_data <- nematode %>%
filter(site == clicked_site) %>%
select("channel_index" = CI, "sigma_maturity_index" = SMI, "enrichment_footprint" = EI) %>%
gather(key = "Index", value = "Value")
selected_data$Index <- factor(selected_data$Index,
levels = c("Channel Index", "Sigma Maturity Index", "Enrichment Index"),
labels = c("CI", "SMI", "EI"))
output$index_bar_plot <- renderPlot({
ggplot(selected_data, aes(x = Index, y = Value, fill = Index)) +
geom_col() +
theme_minimal() +
scale_fill_manual(values = c("CI" = "#E41A1C", "SMI" = "#377EB8", "EI" = "#4DAF4A")) +
labs(title = paste("Indices at Site:", clicked_site),
x = "Index", y = "Value") +
theme(legend.position = "none")
})
}
})
output$plot1 <- renderPlot({
ggplot(data = soil, aes_string(x = input$x_dash, y = input$y_dash, color = "transect")) +
geom_point(na.rm = TRUE) +
theme_light(base_size = 14) +
geom_smooth(method = "lm", se = FALSE)+
labs(title="Soil vs Climatic Properties")
})
output$plot2 <- renderPlot({
soil %>%
filter(elevation_level==input$elevation) %>%
ggplot(aes(x=moisture)) +
geom_density(color="black", fill="steelblue", alpha=0.6)+
labs(title="Moisture at Different Elevation Levels")
})
output$plot3 <- renderPlot({
ggplot(data=soil,
aes(x = factor(elevation_level, levels = c("Low", "Medium", "High")),
y= !!sym(input$y_tables),
color= transect))+
geom_boxplot(na.rm=T)+
theme_light(base_size=14)+
labs(title="Elevation vs Diversity",
x = "Elevation (m)")
})
output$plot4<-renderPlot({
ggplot(data = soil,
aes_string(x=input$x_species, y=input$y_species, color="transect"))+
geom_point(na.rm=T)+
theme_light(base_size = 14)+
geom_smooth(method=lm, se=T, color="black")+
labs(title="Soil Properties vs Trophic Guilds")
})
}
shinyApp(ui, server)
library(shiny)
ui <- dashboardPage(
dashboardHeader(title = "Nematode Soil Dashboard"),
dashboardSidebar(
sidebarMenu(
menuItem("Map", tabName = "map", icon = icon("map")),
menuItem("Soil vs Climatic Properties", tabName = "dashboard", icon = icon("dashboard")),
menuItem("Moisture at Different Elevation Levels", tabName = "widgets", icon = icon("th")),
menuItem("Elevation vs Diversity", tabName = "tables", icon = icon("th")),
menuItem("Soil Properties vs Trophic Guilds", tabName = "species", icon = icon("th"))
)
),
dashboardBody(
tabItems(
tabItem(tabName = "map",
leafletOutput("nematode_map", height = 600),
selectInput("nematode", "Select Trophic Guild(s):",
choices = unique(nematode$trophic_guild),
selected = unique(nematode$trophic_guild)[1],
multiple = TRUE),
sliderInput("pH_range", "Select pH Range:",
min = min(nematode$p_h, na.rm = TRUE),
max = max(nematode$p_h, na.rm = TRUE),
value = c(min(nematode$p_h, na.rm = TRUE), max(nematode$p_h, na.rm = TRUE))),
sliderInput("moisture_range", "Select Moisture Range:",
min = min(nematode$moisture, na.rm = TRUE),
max = max(nematode$moisture, na.rm = TRUE),
value = c(min(nematode$moisture, na.rm = TRUE), max(nematode$moisture, na.rm = TRUE))),
sliderInput("elevation_range", "Select Elevation Range:",
min = min(nematode$elevation, na.rm = TRUE),
max = max(nematode$elevation, na.rm = TRUE),
value = c(min(nematode$elevation, na.rm = TRUE), max(nematode$elevation, na.rm = TRUE)))
),
tabItem(tabName = "dashboard",
fluidRow(
box(plotOutput("plot1", height = 250)),
selectInput("x_dash", "Select Soil Variable:",
choices = c("conductivity", "p_h", "moisture", "temperature"),
selected = "conductivity"),
selectInput("y_dash", "Select Climatic Variable:",
choices = c("temperature_annual_range", "precipitation_of_wettest_month", "precipitation_seasonality", "precipitation_of_driest_month"),
selected = "temperature_annual_range")
)
),
tabItem(tabName = "widgets",
fluidRow(
box(plotOutput("plot2", height = 250)),
selectInput("elevation", "Select Elevation Level:", choices = unique(soil$elevation_level))
)
),
tabItem(tabName = "tables",
fluidRow(
box(plotOutput("plot3", height = 250)),
selectInput("y_tables", "Select Y Variable",
choices = c("enrichment_footprint", "composite_footprint", "sigma_maturity_index"),
selected = "enrichment_footprint")
)
),
tabItem(tabName = "species",
fluidRow(
box(plotOutput("plot4", height = 400, width = 400)),
selectInput("x_species", "Select X Variable",
choices = c("conductivity", "p_h", "moisture", "temperature","isothermality"),
selected = "conductivity"),
selectInput("y_species", "Select Y Variable",
choices = c("herbivores_percent_of_total", "fungivores_percent_of_total", "bacterivores_percent_of_total", "predators_percent_of_total", "omnivores_percent_of_total"),
selected = "herbivores_percent_of_total")
)
)
)
)
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
pal <- colorFactor(palette = c("#E41A1C", "#377EB8", "#FF7F00", "#984EA3", "#F1C40F"),
domain = unique(nematode$trophic_guild))
filtered_data <- reactive({
nematode %>%
filter(trophic_guild %in% input$nematode,
elevation >= input$elevation_range[1] & elevation <= input$elevation_range[2],
p_h >= input$pH_range[1] & p_h <= input$pH_range[2],
moisture >= input$moisture_range[1] & moisture <= input$moisture_range[2],
percent > 0) %>%
left_join(elevation_dominant, by = "elevation_level") %>%
mutate(mean_percent = round(mean_percent, 2))
})
output$nematode_map <- renderLeaflet({
leaflet(filtered_data()) %>%
addTiles() %>%
addCircleMarkers(
~longitude, ~latitude,
color = ~pal(trophic_guild),
fillColor = ~pal(trophic_guild),
fillOpacity = 0.8,
popup = ~paste(
"<b>Site:</b> ", site, " 🌍<br>",
"<b>Trophic Guild:</b> ", trophic_guild, " 🐛<br>",
"<b>Percent:</b> ", sprintf("%.2f", percent), "% 📊<br>",
"<b>Elevation:</b> ", elevation, "m <i>(", elevation_level, ")</i> ⛰️<br>",
"<b>Dominant Guild at This Elevation:</b> ", mean_percent, "% - <i>", trophic_guild_d, "</i> 🏆<br>",
"<b>pH:</b> ", p_h, " 🌱<br>",
"<b>Moisture:</b> ", moisture, " 💧<br>",
"<b>Conductivity:</b> ", conductivity, " ⚡<br>"
),
clusterOptions = markerClusterOptions(spiderfyOnMaxZoom = TRUE,
showCoverageOnHover = FALSE,
zoomToBoundsOnClick = TRUE,
spiderfyDistanceMultiplier = 2)
) %>%
addLegend("topright",
pal = pal,
values = ~trophic_guild,
title = "Trophic Guild",
opacity = 1)
})
output$plot1 <- renderPlot({
ggplot(data = soil, aes_string(x = input$x_dash, y = input$y_dash, color = "transect")) +
geom_point(na.rm = TRUE) +
theme_light(base_size = 14) +
geom_smooth(method = "lm", se = FALSE)+
labs(title="Soil vs Climatic Properties")
})
output$plot2 <- renderPlot({
soil %>%
filter(elevation_level==input$elevation) %>%
ggplot(aes(x=moisture)) +
geom_density(color="black", fill="steelblue", alpha=0.6)+
labs(title="Moisture at Different Elevation Levels")
})
output$plot3 <- renderPlot({
ggplot(data=soil,
aes(x = factor(elevation_level, levels = c("Low", "Medium", "High")),
y= !!sym(input$y_tables),
color= transect))+
geom_boxplot(na.rm=T)+
theme_light(base_size=14)+
labs(title="Elevation vs Diversity",
x = "Elevation (m)")
})
output$plot4<-renderPlot({
ggplot(data = soil,
aes_string(x=input$x_species, y=input$y_species, color="transect"))+
geom_point(na.rm=T)+
theme_light(base_size = 14)+
geom_smooth(method=lm, se=T, color="black")+
labs(title="Soil Properties vs Trophic Guilds")
})
}
shinyApp(ui, server)
