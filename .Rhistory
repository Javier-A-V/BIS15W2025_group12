choices = c("enrichment_footprint", "composite_footprint", "sigma_maturity_index"),
selected = "enrichment_footprint")
)
),
tabItem(tabName = "species",
fluidRow(
box(plotOutput("plot4")),
selectInput("x_species", "Select X Variable",
choices = c("conductivity", "p_h", "moisture", "temperature","isothermality"),
selected = "conductivity"),
selectInput("y_species", "Select Y Variable",
choices = c("herbivores_percent_of_total", "fungivores_percent_of_total", "bacterivores_percent_of_total", "predators_percent_of_total", "omnivores_percent_of_total"),
selected = "herbivores_percent_of_total")
)
)
)
)
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
pal <- colorFactor(palette = c("#E41A1C", "#377EB8", "#FF7F00", "#984EA3", "#F1C40F"),
domain = unique(nematode$trophic_guild))
filtered_data <- reactive({
nematode %>%
filter(trophic_guild %in% input$nematode,
elevation >= input$elevation_range[1] & elevation <= input$elevation_range[2],
p_h >= input$pH_range[1] & p_h <= input$pH_range[2],
moisture >= input$moisture_range[1] & moisture <= input$moisture_range[2],
percent > 0) %>%
left_join(elevation_dominant, by = "elevation_level") %>%
mutate(mean_percent = round(mean_percent, 2))
})
output$nematode_map <- renderLeaflet({
leaflet(filtered_data()) %>%
addTiles() %>%
addCircleMarkers(
~longitude, ~latitude,
color = ~pal(trophic_guild),
fillColor = ~pal(trophic_guild),
fillOpacity = 0.8,
popup = ~paste(
"<b>Site:</b> ", site, " 🌍<br>",
"<b>Trophic Guild:</b> ", trophic_guild, " 🐛<br>",
"<b>Percent:</b> ", sprintf("%.2f", percent), "% 📊<br>",
"<b>Elevation:</b> ", elevation, "m <i>(", elevation_level, ")</i> ⛰️<br>",
"<b>Dominant Guild at This Elevation:</b> ", mean_percent, "% - <i>", trophic_guild_d, "</i> 🏆<br>",
"<b>pH:</b> ", p_h, " 🌱<br>",
"<b>Moisture:</b> ", moisture, " 💧<br>",
"<b>Conductivity:</b> ", conductivity, " ⚡<br>"
),
clusterOptions = markerClusterOptions(spiderfyOnMaxZoom = TRUE,
showCoverageOnHover = FALSE,
zoomToBoundsOnClick = TRUE,
spiderfyDistanceMultiplier = 2)
) %>%
addLegend("topright",
pal = pal,
values = ~trophic_guild,
title = "Trophic Guild",
opacity = 1)
})
output$plot1 <- renderPlot({
ggplot(data = soil, aes_string(x = input$x_dash, y = input$y_dash, color = "transect")) +
geom_point(na.rm = TRUE) +
theme_light(base_size = 14) +
geom_smooth(method = "lm", se = FALSE)+
labs(title="Soil vs Climatic Properties")
})
output$plot2 <- renderPlot({
soil %>%
filter(elevation_level==input$elevation) %>%
ggplot(aes(x=moisture)) +
geom_density(color="black", fill="steelblue", alpha=0.6)+
labs(title="Moisture at Different Elevation Levels")
})
output$plot3 <- renderPlot({
ggplot(data=soil,
aes(x = factor(elevation_level, levels = c("Low", "Medium", "High")),
y= !!sym(input$y_tables),
color= transect))+
geom_boxplot(na.rm=T)+
theme_light(base_size=14)+
labs(title="Elevation vs Diversity",
x = "Elevation (m)")
})
output$plot4<-renderPlot({
ggplot(data = soil,
aes_string(x=input$x_species, y=input$y_species, color="transect"))+
geom_point(na.rm=T)+
theme_light(base_size = 14)+
geom_smooth(method=lm, se=T, color="black")+
labs(title="Soil Properties vs Trophic Guilds")
})
}
shinyApp(ui, server)
library(leaflet)
library(stadiamaps)
library(leaflet)
# Transect locations
data <- data.frame(
Transect = c("Bakori", "Budhal", "Darhal", "Thanamandi"),
Latitude = c(33.393844, 33.377822, 33.483548, 33.536140),
Longitude = c(74.504130, 74.615964, 74.419256, 74.406322)
)
# Create map
leaflet(data) %>%
addTiles(urlTemplate = "https://tiles.stadiamaps.com/tiles/outdoors/{z}/{x}/{y}{r}.png?api_key=" + stadiamaps_api_key) %>%
addMarkers(~Longitude, ~Latitude, popup = ~Transect)
library("tidyverse")
library("janitor")
library("naniar")
library("readxl")
library(shiny)
library(shinydashboard)
library(shinythemes)
library(fastmap)
library(leaflet)
library(mapdata)
library(ggplot2)
library(sf)
library(terra)
library(ggspatial)
library(ggnewscale)
library(ggtext)
library(readxl)
library(elevatr)
library(ggmap)
library(leaflet)
library(viridis)
library(interp)
# Transect locations
data <- data.frame(
Transect = c("Bakori", "Budhal", "Darhal", "Thanamandi"),
Latitude = c(33.393844, 33.377822, 33.483548, 33.536140),
Longitude = c(74.504130, 74.615964, 74.419256, 74.406322)
)
# Create map
leaflet(data) %>%
addTiles(urlTemplate = "https://tiles.stadiamaps.com/tiles/outdoors/{z}/{x}/{y}{r}.png?api_key=" + stadiamaps_api_key) %>%
addMarkers(~Longitude, ~Latitude, popup = ~Transect)
View(data)
map1 <- get_stadiamap(bbox, maptype = "stamen_terrain", zoom=6)
library(ggplot2)
library(sf)
library(terra)
library(ggspatial)
library(ggnewscale)
library(ggtext)
library(readxl)
library(elevatr)
library(ggmap)
library(leaflet)
library(viridis)
library(interp)
# Register Google Maps API (Replace 'your_api_key' with your own key)
register_stadiamaps("bb553146-07e6-4634-b86c-af8ff1ad50f9", write = FALSE)
# Get the bounding box for the data points
lat <- range(soil$latitude)
lon <- range(soil$longitude)
bbox <- make_bbox(lon, lat, f = 0.03)
# Download the terrain basemap
map1 <- get_stadiamap(bbox, maptype = "stamen_terrain", zoom=10)
# Transect locations
data <- data.frame(
Transect = c("Bakori", "Budhal", "Darhal", "Thanamandi"),
Latitude = c(33.393844, 33.377822, 33.483548, 33.536140),
Longitude = c(74.504130, 74.615964, 74.419256, 74.406322)
)
# Create map
ggmap(map1)+
geom_point(data = data, aes(x=Longitude, y=Latitude), size=0.8) + # data= meaning not using pipes but layers
labs(x= "Longitude", y= "Latitude", title="Transects on map")
# Transect locations
data <- data.frame(
Transect = c("Bakori", "Budhal", "Darhal", "Thanamandi"),
Latitude = c(33.393844, 33.377822, 33.483548, 33.536140),
Longitude = c(74.504130, 74.615964, 74.419256, 74.406322)
)
# Create map
ggmap(map1)+
geom_point(data = data, aes(x=Longitude, y=Latitude), size=5) + # data= meaning not using pipes but layers
labs(x= "Longitude", y= "Latitude", title="Transects on map")
# Transect locations
data <- data.frame(
Transect = c("Bakori", "Budhal", "Darhal", "Thanamandi"),
Latitude = c(33.393844, 33.377822, 33.483548, 33.536140),
Longitude = c(74.504130, 74.615964, 74.419256, 74.406322)
)
# Create map
ggmap(map1)+
geom_point(data = data, aes(x=Longitude, y=Latitude, fill=Transect), size=5) + # data= meaning not using pipes but layers
labs(x= "Longitude", y= "Latitude", title="Transects on map")
# Transect locations
data <- data.frame(
Transect = c("Bakori", "Budhal", "Darhal", "Thanamandi"),
Latitude = c(33.393844, 33.377822, 33.483548, 33.536140),
Longitude = c(74.504130, 74.615964, 74.419256, 74.406322)
)
# Create map
ggmap(map1)+
geom_point(data = data, aes(x=Longitude, y=Latitude, color=Transect), size=5) + # data= meaning not using pipes but layers
labs(x= "Longitude", y= "Latitude", title="Transects on map")
webshot2::install_phantomjs()
ggsave("Transect_Map.png", width = 10, height = 7, dpi = 300)
# Download the terrain basemap
map1 <- get_stadiamap(bbox, maptype = "stamen_terrain", zoom=15)
# Download the terrain basemap
map1 <- get_stadiamap(bbox, maptype = "stamen_terrain", zoom=13)
# Download the terrain basemap
map1 <- get_stadiamap(bbox, maptype = "stamen_terrain", zoom=12)
# Transect locations
data <- data.frame(
Transect = c("Bakori", "Budhal", "Darhal", "Thanamandi"),
Latitude = c(33.393844, 33.377822, 33.483548, 33.536140),
Longitude = c(74.504130, 74.615964, 74.419256, 74.406322)
)
# Create map
ggmap(map1)+
geom_point(data = data, aes(x=Longitude, y=Latitude, color=Transect), size=5) + # data= meaning not using pipes but layers
labs(x= "Longitude", y= "Latitude", title="Transects on map")
ggsave("Transect_Map.png", width = 10, height = 7, dpi = 300)
library(shiny)
ui <- dashboardPage(
dashboardHeader(title = "Nematode Soil Dashboard"),
dashboardSidebar(
sidebarMenu(
menuItem("Map", tabName = "map", icon = icon("map")),
menuItem("Soil vs Climatic Properties", tabName = "dashboard", icon = icon("dashboard")),
menuItem("Moisture at Different Elevation Levels", tabName = "widgets", icon = icon("th")),
menuItem("Elevation vs Diversity", tabName = "tables", icon = icon("th")),
menuItem("Soil Properties vs Trophic Guilds", tabName = "species", icon = icon("th"))
)
),
dashboardBody(
tabItems(
tabItem(tabName = "map",
leafletOutput("nematode_map", height = 600),
selectInput("nematode", "Select Trophic Guild(s):",
choices = unique(nematode$trophic_guild),
selected = unique(nematode$trophic_guild)[1],
multiple = TRUE),
sliderInput("pH_range", "Select pH Range:",
min = min(nematode$p_h, na.rm = TRUE),
max = max(nematode$p_h, na.rm = TRUE),
value = c(min(nematode$p_h, na.rm = TRUE), max(nematode$p_h, na.rm = TRUE))),
sliderInput("moisture_range", "Select Moisture Range:",
min = min(nematode$moisture, na.rm = TRUE),
max = max(nematode$moisture, na.rm = TRUE),
value = c(min(nematode$moisture, na.rm = TRUE), max(nematode$moisture, na.rm = TRUE))),
sliderInput("elevation_range", "Select Elevation Range:",
min = min(nematode$elevation, na.rm = TRUE),
max = max(nematode$elevation, na.rm = TRUE),
value = c(min(nematode$elevation, na.rm = TRUE), max(nematode$elevation, na.rm = TRUE)))
),
tabItem(tabName = "dashboard",
fluidRow(
box(plotOutput("plot1")),
selectInput("x_dash", "Select Soil Variable:",
choices = c("conductivity", "p_h", "moisture", "temperature"),
selected = "conductivity"),
selectInput("y_dash", "Select Climatic Variable:",
choices = c("temperature_annual_range", "precipitation_of_wettest_month", "precipitation_seasonality", "precipitation_of_driest_month"),
selected = "temperature_annual_range")
)
),
tabItem(tabName = "widgets",
fluidRow(
box(plotOutput("plot2")),
selectInput("elevation", "Select Elevation Level:", choices = unique(soil$elevation_level))
)
),
tabItem(tabName = "tables",
fluidRow(
box(plotOutput("plot3")),
selectInput("y_tables", "Select Y Variable",
choices = c("enrichment_footprint", "composite_footprint", "sigma_maturity_index"),
selected = "enrichment_footprint")
)
),
tabItem(tabName = "species",
fluidRow(
box(plotOutput("plot4")),
selectInput("x_species", "Select X Variable",
choices = c("conductivity", "p_h", "moisture", "temperature","isothermality"),
selected = "conductivity"),
selectInput("y_species", "Select Y Variable",
choices = c("herbivores_percent_of_total", "fungivores_percent_of_total", "bacterivores_percent_of_total", "predators_percent_of_total", "omnivores_percent_of_total"),
selected = "herbivores_percent_of_total")
)
)
)
)
)
library("tidyverse")
library("janitor")
library("naniar")
library("readxl")
library(shiny)
library(shinydashboard)
library(shinythemes)
library(fastmap)
library(leaflet)
library(mapdata)
library(plotly)
library(dplyr)
ui <- fluidPage(theme = shinytheme('flatly'),
navbarPage("Nematode Soil Dashboard",
tabPanel("Map",
fluidPage(
leafletOutput("nematode_map", height = 600),
br(),
selectInput("nematode", "Select Trophic Guild(s):",
choices = unique(nematode$trophic_guild),
selected = unique(nematode$trophic_guild)[1],
multiple = TRUE),
sliderInput("pH_range", "Select pH Range:",
min = min(nematode$p_h, na.rm = TRUE),
max = max(nematode$p_h, na.rm = TRUE),
value = c(min(nematode$p_h, na.rm = TRUE), max(nematode$p_h, na.rm = TRUE))),
sliderInput("moisture_range", "Select Moisture Range:",
min = min(nematode$moisture, na.rm = TRUE),
max = max(nematode$moisture, na.rm = TRUE),
value = c(min(nematode$moisture, na.rm = TRUE), max(nematode$moisture, na.rm = TRUE))),
sliderInput("elevation_range", "Select Elevation Range:",
min = min(nematode$elevation, na.rm = TRUE),
max = max(nematode$elevation, na.rm = TRUE),
value = c(min(nematode$elevation, na.rm = TRUE), max(nematode$elevation, na.rm = TRUE)))
)
),
tabPanel("Soil and Climate",
fluidPage(
fluidRow(
column(6,
plotOutput("plot_soil_climate", height = 250)
),
column(6,
selectInput("x_soil", "Select Soil Variable:",
choices = c("conductivity", "p_h", "moisture", "temperature"),
selected = "conductivity"),
selectInput("y_climate", "Select Climatic Variable:",
choices = c("temperature_annual_range", "precipitation_of_wettest_month",
"precipitation_seasonality", "precipitation_of_driest_month"),
selected = "temperature_annual_range")
)
)
)
),
tabPanel("Elevation and Soil Moisture",
fluidPage(
fluidRow(
column(6,
plotOutput("plot_soil_moisture", height = 250)
),
column(6,
selectInput("elevation", "Select Elevation Level:",
choices = unique(soil$elevation_level))
)
)
)
),
tabPanel("Elevation and Diversity",
fluidPage(
fluidRow(
column(6,
plotOutput("plot_diversity", height = 250)
),
column(6,
selectInput("y_diversity", "Select Y Variable",
choices = c("enrichment_footprint", "composite_footprint",
"sigma_maturity_index"),
selected = "enrichment_footprint")
)
)
)
),
tabPanel("Elevation level and Species",
fluidPage(
fluidRow(
column(6,
plotOutput("plot_species", height = 400, width = 400)
),
column(6,
selectInput("x_species", "Select X Variable",
choices = c("conductivity", "p_h", "moisture", "temperature", "isothermality"),
selected = "conductivity"),
selectInput("y_species", "Select Y Variable",
choices = c("herbivores_percent_of_total", "fungivores_percent_of_total",
"bacterivores_percent_of_total", "predators_percent_of_total",
"omnivores_percent_of_total"),
selected = "herbivores_percent_of_total")
)
)
)
),
tabPanel("3D Plot",
sidebarLayout(
sidebarPanel(
selectInput("x_axis", "Select X Variable (Soil Properties):",
choices = c("conductivity", "p_h", "moisture", "temperature"),
selected = "conductivity"),
selectInput("y_axis", "Select Y Variable (Climate Properties):",
choices = c("temperature_annual_range", "precipitation_of_wettest_month",
"precipitation_seasonality", "precipitation_of_driest_month"),
selected = "temperature_annual_range"),
selectInput("z_axis", "Select Z Variable (Trophic Guild):",
choices = c("herbivores_percent_of_total", "fungivores_percent_of_total",
"bacterivores_percent_of_total", "predators_percent_of_total",
"omnivores_percent_of_total"),
selected = "herbivores_percent_of_total")
),
mainPanel(
plotlyOutput("plot3D", height = "600px")
)
)
)
)
)
server <- function(input, output, session) {
pal <- colorFactor(
palette = c("#E41A1C", "#377EB8", "#FF7F00", "#984EA3", "#F1C40F"),
domain = unique(nematode$trophic_guild)
)
filtered_data <- reactive({
nematode %>%
filter(trophic_guild %in% input$nematode,
elevation >= input$elevation_range[1] & elevation <= input$elevation_range[2],
p_h >= input$pH_range[1] & p_h <= input$pH_range[2],
moisture >= input$moisture_range[1] & moisture <= input$moisture_range[2],
percent > 0)
})
output$nematode_map <- renderLeaflet({
leaflet(filtered_data()) %>%
addTiles() %>%
addCircleMarkers(
~longitude, ~latitude,
color = ~pal(trophic_guild),
fillColor = ~pal(trophic_guild),
fillOpacity = 0.8,
popup = ~paste("Site:", site,
"<br>Trophic Guild:", trophic_guild,
"<br>Percent:", percent,
"<br>pH:", p_h,
"<br>Moisture:", moisture,
"<br>Elevation:", elevation,
"<br>Conductivity:", conductivity),
clusterOptions = markerClusterOptions()
) %>%
addLegend("topright",
pal = pal,
values = ~trophic_guild,
title = "Trophic Guild",
opacity = 1)
})
output$plot_soil_climate <- renderPlot({
ggplot(data = soil, aes_string(x = input$x_soil, y = input$y_climate, color = "transect")) +
geom_point(na.rm = TRUE) +
theme_light(base_size = 14) +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "Soil vs Climatic Properties")
})
output$plot_soil_moisture <- renderPlot({
soil %>%
filter(elevation_level == input$elevation) %>%
ggplot(aes(x = moisture)) +
geom_density(color = "black", fill = "steelblue", alpha = 0.6) +
labs(title = "Moisture at Different Elevation Levels")
})
output$plot_diversity <- renderPlot({
ggplot(data = soil, aes_string(x = "elevation_level", y = input$y_diversity, color = "transect")) +
geom_boxplot(na.rm = TRUE) +
theme_light(base_size = 14) +
labs(title = "Elevation vs Diversity")
})
output$plot_species <- renderPlot({
ggplot(data = soil, aes_string(x = input$x_species, y = input$y_species, color = "transect")) +
geom_point(na.rm = TRUE) +
theme_light(base_size = 14) +
geom_smooth(method = "lm", se = TRUE, color = "black") +
labs(title = "Soil Properties vs Trophic Guilds")
})
output$plot3D <- renderPlotly({
model <- lm(as.formula(paste(input$z_axis, "~", input$x_axis, "+", input$y_axis)), data = soil)
x_range <- seq(min(soil[[input$x_axis]], na.rm = TRUE), max(soil[[input$x_axis]], na.rm = TRUE), length.out = 20)
y_range <- seq(min(soil[[input$y_axis]], na.rm = TRUE), max(soil[[input$y_axis]], na.rm = TRUE), length.out = 20)
grid <- expand.grid(x = x_range, y = y_range)
colnames(grid) <- c(input$x_axis, input$y_axis)
grid[[input$z_axis]] <- predict(model, newdata = grid)
plot_ly(data = soil,
x = ~get(input$x_axis),
y = ~get(input$y_axis),
z = ~get(input$z_axis),
type = "scatter3d",
mode = "markers",
marker = list(size = 5, color = ~get(input$z_axis), colorscale = "Viridis")) %>%
add_trace(
x = grid[[input$x_axis]],
y = grid[[input$y_axis]],
z = grid[[input$z_axis]],
type = "mesh3d",
opacity = 0.5,
color = "purple"
) %>%
layout(
scene = list(
xaxis = list(title = input$x_axis),
yaxis = list(title = input$y_axis),
zaxis = list(title = input$z_axis)
)
)
})
}
shinyApp(ui, server)
