elev_df <- expand.grid(x = interp_grid$x, y = interp_grid$y)
elev_df$z <- as.vector(interp_grid$z)
# ----  Corrected Elevation Gradient Map ---- #
ggplot() +
annotation_raster(map_raster, xmin = min(lon), xmax = max(lon),
ymin = min(lat), ymax = max(lat)) +  # Add basemap
geom_raster(data = elev_df, aes(x = x, y = y, fill = z), alpha = 0.5) +  # Overlay elevation
scale_fill_gradient(low = "lightblue", high = "darkblue", name = "Elevation (m)") +
geom_point(data = soil, aes(x = longitude, y = latitude, color = transect), size = 4, alpha = 0.9) +  # Sample sites
labs(title = "Elevation Gradient Map with Sample Sites",
x = "Longitude", y = "Latitude", color = "Transect Site") +
coord_cartesian(xlim = lon, ylim = lat) +  # Fix coordinate system
theme_minimal()
# Convert basemap to raster format
map_raster <- as.raster(map1)
# Interpolate elevation for a smooth gradient
interp_grid <- with(soil, interp(x = longitude, y = latitude, z = elevation, duplicate = "mean"))
# Convert to dataframe
elev_df <- expand.grid(x = interp_grid$x, y = interp_grid$y)
elev_df$z <- as.vector(interp_grid$z)
# ----  Corrected Elevation Gradient Map ---- #
ggplot() +
annotation_raster(map_raster, xmin = min(lon), xmax = max(lon),
ymin = min(lat), ymax = max(lat)) +  # Add basemap
geom_raster(data = elev_df, aes(x = x, y = y, fill = z), alpha = 0.5) +  # Overlay elevation
scale_fill_gradient(low = "orange", high = "green", name = "Elevation (m)") +
geom_point(data = soil, aes(x = longitude, y = latitude, color = transect), size = 4, alpha = 0.9) +  # Sample sites
labs(title = "Elevation Gradient Map with Sample Sites",
x = "Longitude", y = "Latitude", color = "Transect Site") +
coord_cartesian(xlim = lon, ylim = lat) +  # Fix coordinate system
theme_minimal()
# Convert basemap to raster format
map_raster <- as.raster(map1)
# Interpolate elevation for a smooth gradient
# Create a complete grid covering the bounding box
grid_x <- seq(min(lon), max(lon), length.out = 100)
grid_y <- seq(min(lat), max(lat), length.out = 100)
interp_elev <- interp(x = soil$longitude, y = soil$latitude, z = soil$elevation,
xo = grid_x, yo = grid_y, duplicate = "mean", linear = TRUE)
# Convert to dataframe
elev_df <- expand.grid(Longitude = interp_elev$x, Latitude = interp_elev$y)
elev_df$elevation <- as.vector(interp_elev$z)
# ----  Corrected Elevation Gradient Map ---- #
ggplot() +
annotation_raster(map_raster, xmin = min(lon), xmax = max(lon),
ymin = min(lat), ymax = max(lat)) +  # Add basemap
geom_raster(data = elev_df, aes(x = Longitude, y = Latitude, fill = elevation), alpha = 0.6) +  # Full elevation overlay
scale_fill_gradient(low = "orange", high = "darkgreen", name = "Elevation (m)") +
geom_point(data = soil, aes(x = longitude, y = latitude, color = transect), size = 4, alpha = 0.9) +  # Sample sites
labs(title = "Elevation Gradient Map with Sample Sites",
x = "Longitude", y = "Latitude", color = "Transect Site") +
coord_cartesian(xlim = lon_range, ylim = lat_range) +  # Ensure full coverage
theme_minimal()
# Get elevation for a region (bounding box of your data)
elev_data <- get_elev_raster(locations = soil[, c("longitude", "latitude")], z = 10, src = "aws")
install.packages("MASS")
library(MASS)
# Generate contour lines from elevation data
kde <- kde2d(soil$longitude, soil$latitude, n = 50)
# Convert to data frame for ggplot
contour_df <- expand.grid(Longitude = kde$x, Latitude = kde$y)
contour_df$elevation <- as.vector(kde$z)
# Plot elevation contours
ggplot() +
geom_contour(data = contour_df, aes(x = Longitude, y = Latitude, z = elevation, color = ..level..)) +
scale_color_gradient(low = "blue", high = "red") +
geom_point(data = soil, aes(x = longitude, y = latitude, color = transect), size = 4) +
labs(title = "Elevation Contour Map with Sample Sites", x = "Longitude", y = "Latitude") +
theme_minimal()
#install.packages("MASS")
library(MASS)
# Generate contour lines from elevation data
kde <- kde2d(soil$longitude, soil$latitude, n = 50)
# Convert to data frame for ggplot
contour_df <- expand.grid(Longitude = kde$x, Latitude = kde$y)
contour_df$elevation <- as.vector(kde$z)
# Plot elevation contours
ggplot() +
geom_contour(data = contour_df, aes(x = Longitude, y = Latitude, z = elevation, color = ..level..)) +
scale_color_gradient(low = "blue", high = "red") +
geom_point(data = soil, aes(x = longitude, y = latitude, color = transect), size = 4) +
labs(title = "Elevation Contour Map with Sample Sites", x = "Longitude", y = "Latitude") +
theme_minimal()
#install.packages("MASS")
library(MASS)
# Generate contour lines from elevation data
kde <- kde2d(soil$longitude, soil$latitude, n = 50)
# Convert to data frame for ggplot
contour_df <- expand.grid(Longitude = kde$x, Latitude = kde$y)
contour_df$elevation <- as.vector(kde$z)
# Plot elevation contours
ggplot() +
# Elevation contour lines with a smooth gradient
geom_contour_filled(data = contour_df, aes(x = Longitude, y = Latitude, z = elevation), alpha = 0.6) +
scale_fill_gradient(low = "orange", high = "darkgreen", name = "Elevation (m)") +
# Sample sites, colored by categorical Transect
geom_point(data = soil, aes(x = longitude, y = latitude, color = transect), size = 4) +
scale_color_manual(values = c("red", "yellow", "blue", "purple")) +  # Custom colors for Transects
# Labels and theme
labs(title = "Elevation Contour Map with Sample Sites",
x = "Longitude", y = "Latitude", color = "Transect Site") +
theme_minimal()
View(contour_df)
library("tidyverse")
library("janitor")
library("naniar")
library("readxl")
library(shiny)
library(shinydashboard)
library(shinythemes)
library(fastmap)
library(leaflet)
library(mapdata)
soil <- read_excel("Soil_nematodes_all_data_final_Dryad.xlsx") %>% clean_names()
soil <- soil %>%
replace_with_na_all(condition = ~.x == "NaN") %>%
mutate(across(ends_with("herbivores"), ~ round(suppressWarnings(as.numeric(.)), 1)))
soil2 <- read_excel("Soil_nematodes_all_data_final_Dryad.xlsx") %>% clean_names()
nematode <- soil2 %>%
pivot_longer(cols = contains ("_percent_of_total"),
names_to = "trophic_guild",
values_to = "percent") %>%
mutate(trophic_guild = str_remove(trophic_guild, "_percent_of_total"))
soil <- soil %>%
mutate(herbivore_level = case_when(herbivores_percent_of_total <= 40 ~ "small",
herbivores_percent_of_total > 40 & herbivores_percent_of_total <= 60 ~ "medium",
herbivores_percent_of_total > 60 ~ "large"))
soil <- soil %>%
mutate(fungivores_level = case_when(fungivores_percent_of_total <= 40 ~ "small",
fungivores_percent_of_total > 40 & fungivores_percent_of_total <= 60 ~ "medium",
fungivores_percent_of_total > 60 ~ "large"))
soil <- soil %>%
mutate(bacterivores_level = case_when(bacterivores_percent_of_total <= 40 ~ "small",
bacterivores_percent_of_total > 40 & bacterivores_percent_of_total <= 60 ~ "medium",
bacterivores_percent_of_total > 60 ~ "large"))
soil <- soil %>%
mutate(predators_level = case_when(predators_percent_of_total <= 40 ~ "small",
predators_percent_of_total > 40 & predators_percent_of_total <= 60 ~ "medium",
predators_percent_of_total > 60 ~ "large"))
soil <- soil %>%
mutate(omnivores_level = case_when(omnivores_percent_of_total <= 40 ~ "small",
omnivores_percent_of_total > 40 & omnivores_percent_of_total <= 60 ~ "medium",
omnivores_percent_of_total > 60 ~ "large"))
soil <- soil %>%
mutate(elevation_level = case_when(elevation <= 1695.5 ~ "small",
elevation > 1695.5 & elevation <= 3109 ~ "medium",
elevation > 3109 ~ "large"))
nematode<- nematode %>%
mutate(elevation_level = case_when(
elevation <= 1695.5 ~ "Low",
elevation > 1695.5 & elevation <= 3109 ~ "Medium",
elevation > 3109 ~ "High")
)
elevation_summary <- nematode %>%
group_by(elevation_level, trophic_guild) %>%
summarize(mean_percent = mean(percent, na.rm = TRUE), .groups = "drop") %>%
arrange(elevation_level, desc(mean_percent))
elevation_dominant <-  nematode %>%
group_by(elevation_level, trophic_guild) %>%
summarize(mean_percent = mean(percent, na.rm = TRUE), .groups = "drop") %>%
arrange(elevation_level, desc(mean_percent)) %>%
group_by(elevation_level) %>%
slice(1)
elevation_dominant <- elevation_dominant %>%
rename(trophic_guild_d = trophic_guild)
library(shiny)
ui <- dashboardPage(
dashboardHeader(title = "Nematode Soil Dashboard"),
dashboardSidebar(
sidebarMenu(
menuItem("Map", tabName = "map", icon = icon("map")),
menuItem("Soil vs Climatic Properties", tabName = "dashboard", icon = icon("dashboard")),
menuItem("Moisture at Different Elevation Levels", tabName = "widgets", icon = icon("th")),
menuItem("Elevation vs Diversity", tabName = "tables", icon = icon("th")),
menuItem("Soil Properties vs Trophic Guilds", tabName = "species", icon = icon("th"))
)
),
dashboardBody(
tabItems(
tabItem(tabName = "map",
leafletOutput("nematode_map", height = 600),
selectInput("nematode", "Select Trophic Guild(s):",
choices = unique(nematode$trophic_guild),
selected = unique(nematode$trophic_guild)[1],
multiple = TRUE),
sliderInput("pH_range", "Select pH Range:",
min = min(nematode$p_h, na.rm = TRUE),
max = max(nematode$p_h, na.rm = TRUE),
value = c(min(nematode$p_h, na.rm = TRUE), max(nematode$p_h, na.rm = TRUE))),
sliderInput("moisture_range", "Select Moisture Range:",
min = min(nematode$moisture, na.rm = TRUE),
max = max(nematode$moisture, na.rm = TRUE),
value = c(min(nematode$moisture, na.rm = TRUE), max(nematode$moisture, na.rm = TRUE))),
sliderInput("elevation_range", "Select Elevation Range:",
min = min(nematode$elevation, na.rm = TRUE),
max = max(nematode$elevation, na.rm = TRUE),
value = c(min(nematode$elevation, na.rm = TRUE), max(nematode$elevation, na.rm = TRUE)))
),
tabItem(tabName = "dashboard",
fluidRow(
box(plotOutput("plot1")),
selectInput("x_dash", "Select Soil Variable:",
choices = c("conductivity", "p_h", "moisture", "temperature"),
selected = "conductivity"),
selectInput("y_dash", "Select Climatic Variable:",
choices = c("temperature_annual_range", "precipitation_of_wettest_month", "precipitation_seasonality", "precipitation_of_driest_month"),
selected = "temperature_annual_range")
)
),
tabItem(tabName = "widgets",
fluidRow(
box(plotOutput("plot2")),
selectInput("elevation", "Select Elevation Level:", choices = unique(soil$elevation_level))
)
),
tabItem(tabName = "tables",
fluidRow(
box(plotOutput("plot3")),
selectInput("y_tables", "Select Y Variable",
choices = c("enrichment_footprint", "composite_footprint", "sigma_maturity_index"),
selected = "enrichment_footprint")
)
),
tabItem(tabName = "species",
fluidRow(
box(plotOutput("plot4")),
selectInput("x_species", "Select X Variable",
choices = c("conductivity", "p_h", "moisture", "temperature","isothermality"),
selected = "conductivity"),
selectInput("y_species", "Select Y Variable",
choices = c("herbivores_percent_of_total", "fungivores_percent_of_total", "bacterivores_percent_of_total", "predators_percent_of_total", "omnivores_percent_of_total"),
selected = "herbivores_percent_of_total")
)
)
)
)
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
pal <- colorFactor(palette = c("#E41A1C", "#377EB8", "#FF7F00", "#984EA3", "#F1C40F"),
domain = unique(nematode$trophic_guild))
filtered_data <- reactive({
nematode %>%
filter(trophic_guild %in% input$nematode,
elevation >= input$elevation_range[1] & elevation <= input$elevation_range[2],
p_h >= input$pH_range[1] & p_h <= input$pH_range[2],
moisture >= input$moisture_range[1] & moisture <= input$moisture_range[2],
percent > 0) %>%
left_join(elevation_dominant, by = "elevation_level") %>%
mutate(mean_percent = round(mean_percent, 2))
})
output$nematode_map <- renderLeaflet({
leaflet(filtered_data()) %>%
addTiles() %>%
addCircleMarkers(
~longitude, ~latitude,
color = ~pal(trophic_guild),
fillColor = ~pal(trophic_guild),
fillOpacity = 0.8,
popup = ~paste(
"<b>Site:</b> ", site, " 🌍<br>",
"<b>Trophic Guild:</b> ", trophic_guild, " 🐛<br>",
"<b>Percent:</b> ", sprintf("%.2f", percent), "% 📊<br>",
"<b>Elevation:</b> ", elevation, "m <i>(", elevation_level, ")</i> ⛰️<br>",
"<b>Dominant Guild at This Elevation:</b> ", mean_percent, "% - <i>", trophic_guild_d, "</i> 🏆<br>",
"<b>pH:</b> ", p_h, " 🌱<br>",
"<b>Moisture:</b> ", moisture, " 💧<br>",
"<b>Conductivity:</b> ", conductivity, " ⚡<br>"
),
clusterOptions = markerClusterOptions(spiderfyOnMaxZoom = TRUE,
showCoverageOnHover = FALSE,
zoomToBoundsOnClick = TRUE,
spiderfyDistanceMultiplier = 2)
) %>%
addLegend("topright",
pal = pal,
values = ~trophic_guild,
title = "Trophic Guild",
opacity = 1)
})
output$plot1 <- renderPlot({
ggplot(data = soil, aes_string(x = input$x_dash, y = input$y_dash, color = "transect")) +
geom_point(na.rm = TRUE) +
theme_light(base_size = 14) +
geom_smooth(method = "lm", se = FALSE)+
labs(title="Soil vs Climatic Properties")
})
output$plot2 <- renderPlot({
soil %>%
filter(elevation_level==input$elevation) %>%
ggplot(aes(x=moisture)) +
geom_density(color="black", fill="steelblue", alpha=0.6)+
labs(title="Moisture at Different Elevation Levels")
})
output$plot3 <- renderPlot({
ggplot(data=soil,
aes(x = factor(elevation_level, levels = c("Low", "Medium", "High")),
y= !!sym(input$y_tables),
color= transect))+
geom_boxplot(na.rm=T)+
theme_light(base_size=14)+
labs(title="Elevation vs Diversity",
x = "Elevation (m)")
})
output$plot4<-renderPlot({
ggplot(data = soil,
aes_string(x=input$x_species, y=input$y_species, color="transect"))+
geom_point(na.rm=T)+
theme_light(base_size = 14)+
geom_smooth(method=lm, se=T, color="black")+
labs(title="Soil Properties vs Trophic Guilds")
})
}
shinyApp(ui, server)
library(leaflet)
library(stadiamaps)
library(leaflet)
# Transect locations
data <- data.frame(
Transect = c("Bakori", "Budhal", "Darhal", "Thanamandi"),
Latitude = c(33.393844, 33.377822, 33.483548, 33.536140),
Longitude = c(74.504130, 74.615964, 74.419256, 74.406322)
)
# Create map
leaflet(data) %>%
addTiles(urlTemplate = "https://tiles.stadiamaps.com/tiles/outdoors/{z}/{x}/{y}{r}.png?api_key=" + stadiamaps_api_key) %>%
addMarkers(~Longitude, ~Latitude, popup = ~Transect)
library("tidyverse")
library("janitor")
library("naniar")
library("readxl")
library(shiny)
library(shinydashboard)
library(shinythemes)
library(fastmap)
library(leaflet)
library(mapdata)
library(ggplot2)
library(sf)
library(terra)
library(ggspatial)
library(ggnewscale)
library(ggtext)
library(readxl)
library(elevatr)
library(ggmap)
library(leaflet)
library(viridis)
library(interp)
# Transect locations
data <- data.frame(
Transect = c("Bakori", "Budhal", "Darhal", "Thanamandi"),
Latitude = c(33.393844, 33.377822, 33.483548, 33.536140),
Longitude = c(74.504130, 74.615964, 74.419256, 74.406322)
)
# Create map
leaflet(data) %>%
addTiles(urlTemplate = "https://tiles.stadiamaps.com/tiles/outdoors/{z}/{x}/{y}{r}.png?api_key=" + stadiamaps_api_key) %>%
addMarkers(~Longitude, ~Latitude, popup = ~Transect)
View(data)
map1 <- get_stadiamap(bbox, maptype = "stamen_terrain", zoom=6)
library(ggplot2)
library(sf)
library(terra)
library(ggspatial)
library(ggnewscale)
library(ggtext)
library(readxl)
library(elevatr)
library(ggmap)
library(leaflet)
library(viridis)
library(interp)
# Register Google Maps API (Replace 'your_api_key' with your own key)
register_stadiamaps("bb553146-07e6-4634-b86c-af8ff1ad50f9", write = FALSE)
# Get the bounding box for the data points
lat <- range(soil$latitude)
lon <- range(soil$longitude)
bbox <- make_bbox(lon, lat, f = 0.03)
# Download the terrain basemap
map1 <- get_stadiamap(bbox, maptype = "stamen_terrain", zoom=10)
# Transect locations
data <- data.frame(
Transect = c("Bakori", "Budhal", "Darhal", "Thanamandi"),
Latitude = c(33.393844, 33.377822, 33.483548, 33.536140),
Longitude = c(74.504130, 74.615964, 74.419256, 74.406322)
)
# Create map
ggmap(map1)+
geom_point(data = data, aes(x=Longitude, y=Latitude), size=0.8) + # data= meaning not using pipes but layers
labs(x= "Longitude", y= "Latitude", title="Transects on map")
# Transect locations
data <- data.frame(
Transect = c("Bakori", "Budhal", "Darhal", "Thanamandi"),
Latitude = c(33.393844, 33.377822, 33.483548, 33.536140),
Longitude = c(74.504130, 74.615964, 74.419256, 74.406322)
)
# Create map
ggmap(map1)+
geom_point(data = data, aes(x=Longitude, y=Latitude), size=5) + # data= meaning not using pipes but layers
labs(x= "Longitude", y= "Latitude", title="Transects on map")
# Transect locations
data <- data.frame(
Transect = c("Bakori", "Budhal", "Darhal", "Thanamandi"),
Latitude = c(33.393844, 33.377822, 33.483548, 33.536140),
Longitude = c(74.504130, 74.615964, 74.419256, 74.406322)
)
# Create map
ggmap(map1)+
geom_point(data = data, aes(x=Longitude, y=Latitude, fill=Transect), size=5) + # data= meaning not using pipes but layers
labs(x= "Longitude", y= "Latitude", title="Transects on map")
# Transect locations
data <- data.frame(
Transect = c("Bakori", "Budhal", "Darhal", "Thanamandi"),
Latitude = c(33.393844, 33.377822, 33.483548, 33.536140),
Longitude = c(74.504130, 74.615964, 74.419256, 74.406322)
)
# Create map
ggmap(map1)+
geom_point(data = data, aes(x=Longitude, y=Latitude, color=Transect), size=5) + # data= meaning not using pipes but layers
labs(x= "Longitude", y= "Latitude", title="Transects on map")
webshot2::install_phantomjs()
ggsave("Transect_Map.png", width = 10, height = 7, dpi = 300)
# Download the terrain basemap
map1 <- get_stadiamap(bbox, maptype = "stamen_terrain", zoom=15)
# Download the terrain basemap
map1 <- get_stadiamap(bbox, maptype = "stamen_terrain", zoom=13)
# Download the terrain basemap
map1 <- get_stadiamap(bbox, maptype = "stamen_terrain", zoom=12)
# Transect locations
data <- data.frame(
Transect = c("Bakori", "Budhal", "Darhal", "Thanamandi"),
Latitude = c(33.393844, 33.377822, 33.483548, 33.536140),
Longitude = c(74.504130, 74.615964, 74.419256, 74.406322)
)
# Create map
ggmap(map1)+
geom_point(data = data, aes(x=Longitude, y=Latitude, color=Transect), size=5) + # data= meaning not using pipes but layers
labs(x= "Longitude", y= "Latitude", title="Transects on map")
ggsave("Transect_Map.png", width = 10, height = 7, dpi = 300)
library(shiny)
ui <- dashboardPage(
dashboardHeader(title = "Nematode Soil Dashboard"),
dashboardSidebar(
sidebarMenu(
menuItem("Map", tabName = "map", icon = icon("map")),
menuItem("Soil vs Climatic Properties", tabName = "dashboard", icon = icon("dashboard")),
menuItem("Moisture at Different Elevation Levels", tabName = "widgets", icon = icon("th")),
menuItem("Elevation vs Diversity", tabName = "tables", icon = icon("th")),
menuItem("Soil Properties vs Trophic Guilds", tabName = "species", icon = icon("th"))
)
),
dashboardBody(
tabItems(
tabItem(tabName = "map",
leafletOutput("nematode_map", height = 600),
selectInput("nematode", "Select Trophic Guild(s):",
choices = unique(nematode$trophic_guild),
selected = unique(nematode$trophic_guild)[1],
multiple = TRUE),
sliderInput("pH_range", "Select pH Range:",
min = min(nematode$p_h, na.rm = TRUE),
max = max(nematode$p_h, na.rm = TRUE),
value = c(min(nematode$p_h, na.rm = TRUE), max(nematode$p_h, na.rm = TRUE))),
sliderInput("moisture_range", "Select Moisture Range:",
min = min(nematode$moisture, na.rm = TRUE),
max = max(nematode$moisture, na.rm = TRUE),
value = c(min(nematode$moisture, na.rm = TRUE), max(nematode$moisture, na.rm = TRUE))),
sliderInput("elevation_range", "Select Elevation Range:",
min = min(nematode$elevation, na.rm = TRUE),
max = max(nematode$elevation, na.rm = TRUE),
value = c(min(nematode$elevation, na.rm = TRUE), max(nematode$elevation, na.rm = TRUE)))
),
tabItem(tabName = "dashboard",
fluidRow(
box(plotOutput("plot1")),
selectInput("x_dash", "Select Soil Variable:",
choices = c("conductivity", "p_h", "moisture", "temperature"),
selected = "conductivity"),
selectInput("y_dash", "Select Climatic Variable:",
choices = c("temperature_annual_range", "precipitation_of_wettest_month", "precipitation_seasonality", "precipitation_of_driest_month"),
selected = "temperature_annual_range")
)
),
tabItem(tabName = "widgets",
fluidRow(
box(plotOutput("plot2")),
selectInput("elevation", "Select Elevation Level:", choices = unique(soil$elevation_level))
)
),
tabItem(tabName = "tables",
fluidRow(
box(plotOutput("plot3")),
selectInput("y_tables", "Select Y Variable",
choices = c("enrichment_footprint", "composite_footprint", "sigma_maturity_index"),
selected = "enrichment_footprint")
)
),
tabItem(tabName = "species",
fluidRow(
box(plotOutput("plot4")),
selectInput("x_species", "Select X Variable",
choices = c("conductivity", "p_h", "moisture", "temperature","isothermality"),
selected = "conductivity"),
selectInput("y_species", "Select Y Variable",
choices = c("herbivores_percent_of_total", "fungivores_percent_of_total", "bacterivores_percent_of_total", "predators_percent_of_total", "omnivores_percent_of_total"),
selected = "herbivores_percent_of_total")
)
)
)
)
)
